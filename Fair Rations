#include <iostream>
#include <vector>
#include <string>
#include <numeric>
#include <algorithm>

std::string fairRations(std::vector<int> B) {
    int N = B.size();
    int loaves_distributed = 0;

    for (int i = 0; i < N - 1; ++i) {
        // Check if the current person B[i] has an odd number of loaves
        if (B[i] % 2 != 0) {
            // Give a loaf to B[i] to make it even
            B[i]++;
            
            // The rule requires giving a loaf to an adjacent person.
            // We must give the second loaf to B[i+1] to propagate the odd count 
            // down the line, ensuring B[i] is fixed.
            B[i+1]++;
            
            // Two loaves were distributed in this operation
            loaves_distributed += 2;
        }
    }

    // After the loop, all elements up to B[N-2] are even.
    // The final element B[N-1] must also be even for a valid solution.
    if (B[N-1] % 2 != 0) {
        return "NO";
    } else {
        // All elements are even, return the total distributed loaves as a string
        return std::to_string(loaves_distributed);
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int N;
    if (!(std::cin >> N)) return 0;
    
    std::vector<int> B(N);
    for (int i = 0; i < N; ++i) {
        if (!(std::cin >> B[i])) return 0;
    }

    std::cout << fairRations(B) << "\n";
    
    return 0;
}
